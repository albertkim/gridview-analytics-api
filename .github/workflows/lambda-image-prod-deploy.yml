name: LambdaImageDeploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: gridview-analytics-api-lambda-img
  LAMBDA_FUNCTION_NAME: gridview-analytics-api-prod
  CF_DISTRIBUTION_ID: E90QTKVUQ5WWC

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2146 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2146 }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "::set-output name=IMAGE_URI::$(cat $GITHUB_OUTPUT)"
      - name: Update Lambda function
        id: update-lambda-function
        env:
          PACKAGE_ID: ${{ github.sha }}
        run: |
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri "${{ steps.build-image.outputs.IMAGE_URI }}"
          aws cloudfront create-invalidation --distribution-id $CF_DISTRIBUTION_ID --paths "/api/v1/*"
